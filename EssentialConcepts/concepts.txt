Essential Concepts
Arrays:
    Collection of similar data types. Start at a point in memory and ever element is sequential.     
Cannot initialize variable sized arrays. 

Stuctures:
    Collection of data members under one name. Userdefined data types. Structures do not take up any 
memory until intialized. 

Complex Numbers:
    Can be expressed in the form a + bi, where a and b are real number, and i is a symbol called the imaginary unit. 

Pointers:
    A pointer is an address variable. Main memory is divided into three sections: code, stack and heap. Program 
can directly access code and stack. Heap is external to program. One of the uses of pointers is to acces the
heap. Declared with *. Ex: int *p;. You can then assign a different value located in varible by usuing: p = &variable. 
Pointer is then derefernced usign *. 
    Malloc will allocate memory for pointer to heap. Allot memory in malloc in terms of bytes. Fastest way is to 
use sizeof(dataType) * how many members you want. Malloc returns void pointer, so needs to be cast. (int *)malloc(SIZE);.
Cpp syntax p = new p[5];. To free pointer in C use free(pointer). In CPP use delete [] pointer;

References (CPP):
    Varaible will be added to stack frame. Create variable for reference by usign &. Example: 
Int a = 10; int &r = a; Incrementing r will increase the VALUE to a. The use of this is to pass 
reference to function. 

Functions:
    Where grouping data is a structure, grouping instructions is a function. Function programming is 
called Modular or Procedural programming. Monolithic programming is where all instructions are in 
main() without any functions. C passes parameters by value, where as CPP passes by reference. Passing
by value copies value into function. If passing structure as argument, use pointer. 

Passing Methods:
    Call by Value: Values inside function do not change global or caller variables. 
    Call by Reference: Values are changed outside of scope of function

Converting C to CPP code:
    When switching from structs to classes, no need to pass structure or class as argument. In class
hide data in private, use functions in public. Only functions should be allowed to access data. Initializations
in cpp are constructors. Constructures have the same name as Class 

Constructors:
    Used to initalize data within a class. Syntax is: ClassName(args); ClassName::ClassName(args){};
A deconstructor deallocated memory within class. syntax is ~ClassName(); ClassName::~ClassName(){};

Templates:
    Generic classes can use any type of data. template<class T>, then change data types to T. Write <T>::
if using scope operator. when using scope operatora to describe functions, using return type of T IF function
returns. When declaring class name, use ClassName<datatype> name; Ex. Rectangle<int> r;. 
