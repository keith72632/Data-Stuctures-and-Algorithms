Why use linked lists?
    Arrays are fixed in size, which is a problem when using dynamic memory. Linked Lists alleviate this problem. Arrays are declared
in stack, Linked Lists and dynamic memory are stored in heap. Linked Lists are composed of an intial pointer, which points to an
element in heap, which also has a pointer that points to the next element. 

Creating Linked List:
    Linked lists are a collection of nodes, where each node contains data and pointer to next node. First node is called Head. Use
another pointer variable for the first as to not "corrupt" the head. So if *first is the first node in LL, then assign a vraible to
it. struct Node *first = NULL, *p = NULL; first = (struct Node *)malloc(sizeof(struct Node)); p = first;
    Initalize first node in linked list. Initalize data with the data of first node, but initialized the next pointer as NULL. Then
"replace" the first node with another pointer variable like "last" or "tail". last = first;. 

Recursive Functions 
    Using recursive functions is highly benificial when using linked lists. When functions have to iterate through a set of linked lists,
pass the first node as an argument to the function, and inside the function, call the function again and pass ptr->next as argument.

Searching in a Linked List
    Must traverse a linked list from the beginning. Linear search checks one by one, and binary search checks every
second. Bianry only works on sorted lists, or in other words, doesnt work on Linked Lists. 

Deleting Node
	Free node. Delete first node-> Assign first node a temp. Move first node to next. 
delete temp. 
